version: '3.7'
services:
  db:
    image: postgres:16
    restart: always
    user: "70:70"
    volumes:
      - tg_bots_postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    command: -p 5433
    expose:
      - 5433
    networks:
      - tg_bots_app_network
    container_name: app_postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7
    container_name: redis_app
    command: --port 6380
    expose:
      - 6380

  celery:
    build: ..
    env_file:
      - .env
    container_name: celery_app
    command: bash -c "celery -A app worker -l info"
    depends_on:
      - redis

  app:
    build: ..
    env_file:
      - .env
    container_name: app
    networks:
      - tg_bots_app_network
    command: bash -c "python manage.py makemigrations && python manage.py migrate && python manage.py loaddata fixtures/contacts.json && python manage.py loaddata fixtures/menus.json && python manage.py loaddata fixtures/products.json && gunicorn app.wsgi:application --bind 0:8000"
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    restart: on-failure:10

  nginx:
    image: nginx:1.25-alpine
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_data:/var/html/static/
    ports:
      - "8090:8000"
    expose:
      - 8090
    networks:
      - tg_bots_app_network
    depends_on:
      - app
    container_name: app_nginx

networks:
  tg_bots_app_network: {}
  postgres_network: {}

volumes:
  tg_bots_postgres_data: {}
  static_data: {}